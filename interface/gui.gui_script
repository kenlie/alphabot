local abc = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"}
local alphabet_list = {}
local sorted_alphabet_list = {}
local abc_sequence = {}
local complete = 0
local score = 0

function init(self)
    -- fetch the time text node for later use (assumes it is called "time")
    
	
    
    self.time_node = gui.get_node("time")
    
    self.combo_node = gui.get_node("combo_text")
    
    self.left_node = gui.get_node("left_text")
    
    self.middle_node = gui.get_node("middle_text")
    
    self.right_node = gui.get_node("right_text")
    
    --Set initial buttons
    randomstring()
    tbl = alphabet_list
    sorted = sorted_alphabet_list
    
    print(tbl[1],tbl[2],tbl[3])
    print(sorted[1],sorted[2],sorted[3])
    
	self.left_node = gui.set_text(self.left_node, tbl[1])
	self.middle_node = gui.set_text(self.middle_node, tbl[2])
	self.right_node = gui.set_text(self.right_node, tbl[3])
	
	--Set initial score
	
	self.combo_node = gui.set_text(self.combo_node, score)
    
      

    
    -- keep track of the current time counted up so far
    self.current_time = 30
    
    -- keep track of the target time we should count up to
    self.target_time = 0
    
    -- how fast we will update the time, in time/second
    self.time_update_speed = 1
    
	   
	   
	msg.post(".", "acquire_input_focus")
	
	

end

function update(self, dt)

	
    -- check if target time is more than current time
    if self.current_time > self.target_time then
        -- increment current time according to the speed
        self.current_time = self.current_time - dt * self.time_update_speed
        -- check if we went past the target time, clamp current time in that case
        if self.current_time <= self.target_time then
            self.current_time = self.target_time
        end
        -- update the time text node
        gui.set_text(self.time_node, "" .. math.floor(self.current_time))
    end
    

    
    if complete == 3 then
    	msg.post("#", "sequence_complete")
    	msg.post("#", "increment_score")

	end
	
	--[[if self.current_time == 0 then
	
		msg.post("#", "time_out")
		
	end--]]
	
	
    

    
    
    
end

function randomstring(self)
	--Create random string ---
	
	math.randomseed(os.clock()*10000000000000000)	
	

	-- Flag tells if the table already contains char
	
	local flag = 1

	while table.getn(alphabet_list) < 3 do
	
		local s = abc[math.random(26)]
		
		for k in pairs (alphabet_list) do
			
			if s == alphabet_list[k] then 				
				print("already in table!")
				flag = 0
			end		
			
		end
		
		if (flag == 1) then
			table.insert(alphabet_list, s)
			table.insert(sorted_alphabet_list, s)
		end 
		
		table.sort(sorted_alphabet_list) 
		
		flag = 1		
	
		local s = abc[math.random(26)]
		
	end
	
	return alphabet_list, sorted_alphabet_list
	
end 

function delete_randomstring(self)

    for k in pairs (alphabet_list) do
    	alphabet_list[k] = nil
	end
	
	for k in pairs (sorted_alphabet_list) do
    	sorted_alphabet_list[k] = nil
	end
	
	for k in pairs (abc_sequence) do
    	abc_sequence[k] = nil
	end
	
end


function on_message(self, message_id, message, sender)

    -- check the message
    if message_id == hash("set_time") then
        self.target_time = message.time
    end
    
	local left_node = gui.get_node("left_text")
    local middle_node = gui.get_node("middle_text")	    
    local right_node = gui.get_node("right_text")
    local combo_node = gui.get_node("combo_text")
    
    
    -- Set new letters to button
    if message_id == hash("sequence_complete") then
    	
        gui.set_enabled(left_node, true)
		gui.set_enabled(middle_node, true)
		gui.set_enabled(right_node, true)
		
    	delete_randomstring()
    	print("deletedString")
	    randomstring()
	    tbl = alphabet_list
	    sorted = sorted_alphabet_list
	    
	    print(tbl[1],tbl[2],tbl[3])
	    print(sorted[1],sorted[2],sorted[3])
	    
		gui.set_text(left_node, tbl[1])
		gui.set_text(middle_node, tbl[2])
		gui.set_text(right_node, tbl[3])
		
		msg.post(".", "acquire_input_focus")
    	complete = 0
    end
    
    -- increment score
    if message_id == hash("increment_score") then
    	score = score +1
		gui.set_text(combo_node, score)
	end
    	
    
end

function on_input(self, action_id, action)

	if action_id == hash("mouse_press") and action.pressed then
		local x = action.x
		local y = action.y
		
		
		
	    left_node = gui.get_node("left_text")
	    middle_node = gui.get_node("middle_text")	    
	    right_node = gui.get_node("right_text")
	    
	    if gui.pick_node(left_node, x, y) then
	    	
	    	a = gui.get_text(left_node)	    	
	    	table.insert(abc_sequence, a)
	    	
	    	if compare_tables() then 	
	    		gui.set_enabled(left_node, false)
	    		complete = complete +1
	    		
	    	elseif compare_tables() == false then
	    	
	    	    for k in pairs (abc_sequence) do
    				abc_sequence[k] = nil
				end
				gui.set_enabled(left_node, true)
				gui.set_enabled(middle_node, true)
				gui.set_enabled(right_node, true)
				complete = 0
	    	end
	    		    	
	    	print("left")
	    	
	    elseif gui.pick_node(middle_node, x, y) then
	    
	    	b = gui.get_text(middle_node)	    	
	    	table.insert(abc_sequence, b)
	    	   	
	    	if compare_tables() then 	
	    		gui.set_enabled(middle_node, false)
	    		complete = complete +1
	    	
	    	elseif compare_tables() == false then
	    	
	    	    for k in pairs (abc_sequence) do
    				abc_sequence[k] = nil
				end
				gui.set_enabled(left_node, true)
				gui.set_enabled(middle_node, true)
				gui.set_enabled(right_node, true)
				complete = 0
				
	    	end
	    	
	    	print("middle") 
	    	
	    elseif gui.pick_node(right_node, x, y) then
	    
	    	c = gui.get_text(right_node)	    	
	    	table.insert(abc_sequence, c)	
	    	    	
	    	if compare_tables() then 	
	    		gui.set_enabled(right_node, false)
	    		complete = complete +1
	    		
	    	elseif compare_tables() == false then
	    	
	    	    for k in pairs (abc_sequence) do
    				abc_sequence[k] = nil
				end
				
				gui.set_enabled(left_node, true)
				gui.set_enabled(middle_node, true)
				gui.set_enabled(right_node, true)
				complete = 0
				
	    	end
	    	print("right")
	    end
	end
end 

function compare_tables(self)
	for k in pairs (abc_sequence) do
		if abc_sequence[k] ~= sorted_alphabet_list[k] then
		print(abc_sequence[k], "vs", sorted_alphabet_list[k])
		print("not correct")
		return false 	
		end
	end
	
	return true
end 
	
		
	
	
	
	